package com.min.app06.config;

import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.TransactionManager;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

@Configuration
@MapperScan(basePackages = {
    "com.min.app06.mapper"
})
@EnableAspectJAutoProxy
public class AppConfig {

  /* HikariConfig → HikariDataSource → SqlSessionFactory → SqlSessionTemplate */
  
  @Bean
  public HikariConfig hikariconfig() {
    HikariConfig config = new HikariConfig();
    config.setDriverClassName("oracle.jdbc.OracleDriver");
    config.setJdbcUrl("jdbc:oracle:thin:@localhost:1521:xe");
    config.setUsername("GREEN");
    config.setPassword("GREEN");
    return config;
  }
  
  @Bean
  public HikariDataSource hikariDataSource() {
    return new HikariDataSource(hikariconfig());
  }
  
  @Bean
  public SqlSessionFactory sqlSessionFactory() throws Exception {
    SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
    factoryBean.setDataSource(hikariDataSource());
    factoryBean.setConfigLocation(new PathMatchingResourcePatternResolver().getResource("classpath:com/min/app06/mybatis/config/mybatis-config.xml"));
    factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources("classpath:com/min/app06/mybatis/mapper/*.xml"));
    return factoryBean.getObject();
  }
  
  @Bean
  public SqlSessionTemplate sqlSessionTemplate() throws Exception {
    return new SqlSessionTemplate(sqlSessionFactory());
  }
  
  @Bean
  public TransactionManager transactionManager() {
    return new DataSourceTransactionManager(hikariDataSource());
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
}
